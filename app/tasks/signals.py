# tasks/signals.py
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from .serializers import TaskSerializer
from .tasks import send_telegram_notification
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Task
import httpx

def send_personal_telegram_notification_sync(bot_token, chat_id, message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        response = httpx.post(url, json={
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML"
        })
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"Error sending personal Telegram notification: {e}")
        return False

def notify_channels(task, action_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Channels (Websocket)."""
    try:
        channel_layer = get_channel_layer()
        task_data = TaskSerializer(task).data
        
        if task.assigned_to:
            group_name = f"user_{task.assigned_to.id}"
            
            async_to_sync(channel_layer.group_send)(
                group_name,
                {
                    "type": "task_update",
                    "message": task_data
                }
            )
            print(f"WS notification sent to {task.assigned_to.username} for task {task.id}")
    except Exception as e:
        print(f"Error in notify_channels: {e}")

def notify_telegram(task, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Celery/Telegram."""
    try:
        if task.assigned_to and not task.is_completed:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–∏—á–Ω—ã–π –±–æ—Ç
            profile = task.assigned_to.profile
            if profile.personal_bot_token and profile.telegram_chat_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                success = send_personal_telegram_notification_sync(
                    profile.personal_bot_token,
                    profile.telegram_chat_id,
                    message
                )
                if success:
                    print(f"Personal Telegram notification sent to {task.assigned_to.username}")
                else:
                    print(f"Failed to send personal Telegram notification to {task.assigned_to.username}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–∑ Celery)
                send_telegram_notification.delay(task.assigned_to.id, message)
                print(f"System Telegram notification queued for {task.assigned_to.username}")
    except Exception as e:
        print(f"Error in notify_telegram: {e}")

@receiver(post_save, sender=Task)
def task_post_save_handler(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    
    try:
        # WS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞)
        notify_channels(instance, 'updated')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ update_fields –Ω–µ None
        update_fields = kwargs.get('update_fields') or set()
        
        # Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏)
        if created:
            message = f"üö® **–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞** –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º: '{instance.title}'! –°—Ä–æ–∫: {instance.due_date.strftime('%d.%m %H:%M') if instance.due_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            notify_telegram(instance, message)
        elif 'is_completed' in update_fields:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            pass
        else:
            message = f"üîÑ **–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞**: '{instance.title}'. –°—Ä–æ–∫: {instance.due_date.strftime('%d.%m %H:%M') if instance.due_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            notify_telegram(instance, message)
            
    except Exception as e:
        print(f"Error in task_post_save_handler: {e}")