from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from .serializers import TaskSerializer
from .tasks import send_telegram_notification
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Task

def notify_channels(task, action_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Channels (Websocket)."""
    channel_layer = get_channel_layer()
    task_data = TaskSerializer(task).data
    
    if task.assigned_to:
        group_name = f"user_{task.assigned_to.id}"
        
        async_to_sync(channel_layer.group_send)(
            group_name,
            {
                "type": "task_update",
                "message": task_data
            }
        )
        print(f"WS notification sent to {task.assigned_to.username} for task {task.id}")

def notify_telegram(task, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Celery/Telegram."""
    if task.assigned_to and not task.is_completed:
        send_telegram_notification.delay(task.assigned_to.id, message)
        print(f"Celery Telegram notification queued for {task.assigned_to.username}")

@receiver(post_save, sender=Task)
def task_post_save_handler(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    
    # WS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞)
    notify_channels(instance, 'updated')
    
    # Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏)
    if created:
        message = f"üö® **–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞** –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º: '{instance.title}'! –°—Ä–æ–∫: {instance.due_date.strftime('%d.%m %H:%M') if instance.due_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        notify_telegram(instance, message)
    elif 'is_completed' in kwargs.get('update_fields', set()):
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        pass
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
        message = f"üîÑ **–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞**: '{instance.title}'. –°—Ä–æ–∫: {instance.due_date.strftime('%d.%m %H:%M') if instance.due_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        notify_telegram(instance, message)