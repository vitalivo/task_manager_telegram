from core.celery import app
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import timedelta
import httpx
import os
from django.db.models import Q

User = get_user_model()
DJANGO_API_BASE_URL = os.environ.get('DJANGO_API_BASE_URL', 'http://app:8000')
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')


@app.task
def send_telegram_notification(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ Bot API."""
    try:
        user = User.objects.get(id=user_id)
        chat_id = user.profile.telegram_chat_id
        
        if chat_id:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Ö–æ—Ç—è Celery —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π worker
            # –í –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ HTTP-–∑–∞–ø—Ä–æ—Å
            response = httpx.post(url, data=payload)
            response.raise_for_status()
            return f"Telegram notification sent to {user.username}"
        else:
            return f"User {user.username} has no linked Telegram chat ID."
    except User.DoesNotExist:
        return "User not found."
    except httpx.HTTPError as e:
        return f"Telegram API error: {e}"


@app.task
def check_deadlines():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    from .models import Task
    
    now = timezone.now()
    one_hour_later = now + timedelta(hours=1)
    
    # –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª –ò–õ–ò –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞
    tasks_due = Task.objects.filter(
        is_completed=False
    ).filter(
        Q(due_date__lte=now) | Q(due_date__range=(now, one_hour_later))
    ).select_related('assigned_to')

    for task in tasks_due:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        message = f"üî¥ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫! –ó–∞–¥–∞—á–∞ '{task.title}' "
        if task.due_date <= now:
             message += "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!"
        else:
             message += f"–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {int((task.due_date - now).total_seconds() // 60)} –º–∏–Ω—É—Ç."
             
        send_telegram_notification.delay(task.assigned_to.id, message)
    
    return f"Checked {tasks_due.count()} deadlines."

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery Beat –≤ settings.py
# INSTALLED_APPS = ['django_celery_beat', ...]
# CELERY_BEAT_SCHEDULE = {
#     'check-deadlines-every-5-minutes': {
#         'task': 'tasks.tasks.check_deadlines',
#         'schedule': timedelta(minutes=5),
#     },
# }