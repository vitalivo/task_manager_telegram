import logging
import asyncio
import httpx
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

from config import SYSTEM_BOT_TOKEN, DJANGO_API_BASE_URL, API_LINK_ACCOUNT, API_GET_TASKS, API_COMPLETE_TASK, API_GET_USER_BOT_TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
system_bot: Optional[Bot] = None
personal_bots: Dict[str, Bot] = {}  # chat_id -> Bot
dispatchers: Dict[str, Dispatcher] = {}  # chat_id -> Dispatcher
http_client = httpx.AsyncClient()

async def get_user_bot_token(chat_id: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Django API"""
    try:
        response = await http_client.get(
            API_GET_USER_BOT_TOKEN, 
            params={"chat_id": chat_id}
        )
        if response.status_code == 200:
            data = response.json()
            return data.get('personal_bot_token')
    except Exception as e:
        logger.error(f"Error getting user bot token for {chat_id}: {e}")
    return None

async def create_personal_bot(token: str, chat_id: str):
    """–°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        bot = Bot(token=token, default=DefaultBotProperties(parse_mode='HTML'))
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        await register_personal_bot_handlers(dp, chat_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        personal_bots[chat_id] = bot
        dispatchers[chat_id] = dp
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(run_personal_bot_polling(dp, bot, chat_id))
        
        logger.info(f"Personal bot started for user {chat_id}")
        
    except Exception as e:
        logger.error(f"Error creating personal bot for {chat_id}: {e}")

async def register_personal_bot_handlers(dp: Dispatcher, user_chat_id: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    @dp.message(Command('tasks'))
    async def personal_tasks_handler(message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /tasks –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
        await handle_tasks_command(message, user_chat_id)
    
    @dp.callback_query(F.data.startswith("complete_"))
    async def personal_complete_handler(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
        await handle_complete_task(callback, user_chat_id)

async def run_personal_bot_polling(dp: Dispatcher, bot: Bot, chat_id: str):
    """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Personal bot polling failed for {chat_id}: {e}")
        # –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if chat_id in personal_bots:
            del personal_bots[chat_id]
        if chat_id in dispatchers:
            del dispatchers[chat_id]

# --- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ ---

async def handle_tasks_command(message: types.Message, chat_id: str):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    try:
        response = await http_client.get(API_GET_TASKS, params={"chat_id": str(chat_id)})
        
        if response.status_code == 404:
            await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ.")
            return

        tasks = response.json()
        
        if not tasks:
            await message.answer("üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
            return

        builder = InlineKeyboardBuilder()
        text = "üéØ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
        
        for task in tasks:
            due_date = f"–°—Ä–æ–∫: {task['due_date'].split('T')[0]}" if task.get('due_date') else "–°—Ä–æ–∫: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            text += f"ID:{task['id']} - **{task['title']}**\n_{due_date} (–≤ —Å–ø–∏—Å–∫–µ: {task['list_name']})_\n\n"
            builder.button(text=f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å #{task['id']}", callback_data=f"complete_{task['id']}")
            
        builder.adjust(1)
        
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='Markdown')

    except httpx.HTTPError as e:
        logger.error(f"HTTP error in tasks command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")

async def handle_complete_task(callback: types.CallbackQuery, chat_id: str):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    task_id = callback.data.split("_")[1]
    
    try:
        response = await http_client.post(
            API_COMPLETE_TASK, 
            json={"chat_id": str(chat_id), "task_id": task_id}
        )
        
        if response.status_code == 200:
            await callback.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", show_alert=True)
            await callback.message.edit_text(
                f"{callback.message.text}\n\n**-- –ó–∞–¥–∞—á–∞ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ --**",
                parse_mode='Markdown',
                reply_markup=None
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    except httpx.HTTPError as e:
        logger.error(f"HTTP error in complete task: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.", show_alert=True)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞ ---

async def register_system_bot_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    @dp.message(CommandStart())
    async def system_command_start_handler(message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        args = message.text.split()
        chat_id = str(message.chat.id)
        
        if len(args) > 1:
            # –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            token = args[1]
            await handle_account_linking(message, token, chat_id)
        else:
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n"
                "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /tasks\n"
                "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏"
            )
    
    @dp.message(Command('tasks'))
    async def system_tasks_handler(message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /tasks –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        chat_id = str(message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏—á–Ω—ã–π –±–æ—Ç
        personal_token = await get_user_bot_token(chat_id)
        if personal_token:
            await message.answer(
                "ü§ñ –£ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏—á–Ω—ã–π –±–æ—Ç!\n\n"
                "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞. "
                "–°–∏—Å—Ç–µ–º–Ω—ã–π –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
            )
            return
        
        # –ï—Å–ª–∏ –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ
        await handle_tasks_command(message, chat_id)
    
    @dp.callback_query(F.data.startswith("complete_"))
    async def system_complete_handler(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        chat_id = str(callback.message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏—á–Ω—ã–π –±–æ—Ç
        personal_token = await get_user_bot_token(chat_id)
        if personal_token:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.", show_alert=True)
            return
        
        await handle_complete_task(callback, chat_id)

async def handle_account_linking(message: types.Message, token: str, chat_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        response = await http_client.post(
            API_LINK_ACCOUNT, 
            json={"token": token, "chat_id": chat_id}
        )
        
        if response.status_code == 200:
            username = response.json().get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏—á–Ω—ã–π –±–æ—Ç
            personal_token = await get_user_bot_token(chat_id)
            if personal_token:
                await create_personal_bot(personal_token, chat_id)
                await message.answer(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}.\n\n"
                    f"ü§ñ –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏."
                )
            else:
                await message.answer(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}.\n\n"
                    f"üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á."
                )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            
    except httpx.HTTPError as e:
        logger.error(f"HTTP error in account linking: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")

async def initialize_existing_personal_bots():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –ª–∏—á–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏
        users_url = f"{DJANGO_API_BASE_URL}/api/v1/bot/tasks/get-users-with-personal-bots/"
        response = await http_client.get(users_url)
        
        if response.status_code == 200:
            users = response.json()
            logger.info(f"Found {len(users)} users with personal bots")
            
            for user in users:
                if user['personal_bot_token'] and user['telegram_chat_id']:
                    logger.info(f"Starting personal bot for user {user['username']}")
                    await create_personal_bot(user['personal_bot_token'], user['telegram_chat_id'])
        else:
            logger.warning(f"Failed to get users with personal bots: {response.status_code}")
            
    except Exception as e:
        logger.error(f"Error initializing personal bots: {e}")

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    global system_bot
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞
    system_bot = Bot(token=SYSTEM_BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
    system_dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞
    await register_system_bot_handlers(system_dp)
    
    # –ó–ê–ü–£–°–ö–ê–ï–ú –õ–ò–ß–ù–´–• –ë–û–¢–û–í –î–õ–Ø –£–ñ–ï –ü–†–ò–í–Ø–ó–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    logger.info("Initializing existing personal bots...")
    await initialize_existing_personal_bots()
    
    logger.info("Starting system bot...")
    await system_dp.start_polling(system_bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped.")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        asyncio.run(http_client.aclose())